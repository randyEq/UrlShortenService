package com.demo.shortenUrl.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.demo.shortenUrl.common.ShorteningUtil;
import com.demo.shortenUrl.model.UrlEntity;
import com.demo.shortenUrl.repository.UrlRepository;

@Service
public class UrlService {

    Logger logger = LoggerFactory.getLogger(UrlService.class);
    
    @Autowired
    private UrlRepository urlRepository;

    private UrlEntity get(Long id) {
        logger.info(String.format("Fetching Url from database for Id %d", id));
        UrlEntity urlEntity = urlRepository.findById(id).get();
        return urlEntity;
    }

    /**
     * Uses the Base62 encoded to convert to Base10 number and fetches the corresponding record from the database
     *
     * @param shortenString Base62 encoded string
     * @return FullUrl object
     */
    public String getFullUrl(String shortenString) {
    	Long id = null;
    	try {
	        logger.debug("Converting Base 62 string %s to Base 10 id");
	        id = ShorteningUtil.strToId(shortenString);
	        logger.info(String.format("Converted Base 62 string %s to Base 10 id %s", shortenString, id));
    	} catch (Exception e) {
    		logger.error("Exception getFullUrl: " + e.getMessage(), e);
    	}
        return this.get(id).getFullUrl();
    }

    private UrlEntity save(String fullUrl) {
    	UrlEntity urlEntity = new UrlEntity();
    	urlEntity.setFullUrl(fullUrl);
        return urlRepository.save(urlEntity);
    }

    /**
     * save full url to H2 database and uses the autogenerated id to convert to Base62 string
     *
     * @param fullUrl FullUrl object to be converted to shortened url
     * @return ShortUrl 
     */
    public String getShortUrl(String fullUrl) {
    	String shortUrlText = null;
    	try {
	        logger.info("Checking if the url already exists");
	        List<UrlEntity> savedUrls = null;
	        savedUrls = checkFullUrlAlreadyExists(fullUrl);
	
	        UrlEntity savedUrl = null;
	
	        if (savedUrls.isEmpty()) {
	            logger.info(String.format("Saving Url %s to database", fullUrl));
	            savedUrl = this.save(fullUrl);
	            logger.debug(savedUrl.toString());
	        } else {
	            savedUrl = savedUrls.get(0);
	            logger.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
	        }
	
	        logger.debug(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
	        shortUrlText = ShorteningUtil.idToStr(savedUrl.getId());
	        logger.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), shortUrlText));
    	} catch (Exception e) {
    		logger.error("Exception getShortUrl: " + e.getMessage(), e);
    	}
    	return shortUrlText;
       
    }

    /**
     * Check if Url already exists in the database
     *
     * @param fullUrl
     * @return list of UrlEntity objects, list will be empty if no results found
     */
    private List<UrlEntity> checkFullUrlAlreadyExists(String fullUrl) {
        return urlRepository.findUrlByFullUrl(fullUrl);
    }
}
